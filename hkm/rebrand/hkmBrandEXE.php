<?php/**! * Initializes the Hkm_branding_run FRONT END * * Author: HESKEYO KAM * Copyright: Â© 2011 * * Released under the terms of the GNU General Public License. * You should have received a copy of the GNU General Public License, * along with this software. In the main directory, see: /licensing/ * If not, see: {@link http://www.gnu.org/licenses/}. * * @package HKM BRANDING PANEL * @link HTTP://hkmdev.wordpress.com * @link http://wordpress.stackexchange.com/questions/21561/where-is-the-right-place-to-register-enqueue-scripts-styles * @since 1.0 * */function theme_styles(){    // Register the style like this for a theme:    // (First the unique name for the style (custom-style) then the src,    // then dependencies and ver no. and media type)    // wp_register_style('custom-style', get_template_directory_uri() . '/css/custom-style.css', array(), '20120208', 'all');    // enqueing:    //wp_enqueue_style('custom-style');}//add_action('wp_enqueue_scripts', 'theme_styles');if (!class_exists("hkmBrandEXE")) :    class hkmBrandEXE    {        private $temp_dump;        private $enclose_function;        private $path;        private $jpath;        private $jhkmpath;        private $hkmCsspath;        private $hkmBrand_objcontrol;        private $current_user_cap;        private $file_system_css_themes = array();        /*         Working outwards from the innermost set of brackets:         __FILE__ would give something like: "/home/httpd/html/modules/Your_Account/index.php"         dirname(__FILE__) gives "/home/httpd/html/modules/Your_Account"         basename(dirname(__FILE__)) gives "Your_Account".         */        public function __construct()        {            $this->current_user_cap = current_user_can('manage_options');            $this->path = get_template_directory_uri() . "/core/library/js/";            $this->jpath = get_template_directory_uri() . "/library/js";            $this->jhkmpath = get_template_directory_uri() . "/hkm/rebrand/";            $this->hkmCsspath = get_template_directory_uri() . "/hkm/rebrand/theme_admin/";            $this->hkmCssFoundation = get_template_directory_uri() . "/hkm/rebrand/theme_basic_foundation/";            $this->set_file_systemCss();            $this->hkmBrand_objcontrol = "hkmBrand_objcontrol";            $this->init();        }        private function set_file_systemCss()        {            $this->file_system_css_themes = $this->get_file_systemCss();        }        private function get_file_systemCss()        {            $folder = dirname(__FILE__) . "/theme_admin";            $file_system_css_themes = array();            foreach (glob($folder . "/*.css") as $key => $filename) {                $file_system_css_themes[$key] = array("fpath" => $filename, "name" => __FILE__,);            }            return $file_system_css_themes;        }        //direct method        public function get_list_css()        {            $folder = dirname(__FILE__) . "/theme_admin";            $file_system_css_themes = array();            $othemes = array();            foreach (glob($folder . "/*.css") as $key => $filename) {                $file_system_css_themes[$key] = array("fpath" => $filename, "name" => basename($filename, ".css"),);            }            foreach ($file_system_css_themes as $key => $val) {                $othemes[$key] = $val['name'];            }            return $othemes;        }        function init()        {            // . $this->genToken();            /*if ($this -> get_wp_version() >= 3.5) {             add_action('wp_head', array(&$this, 'print_script_head'));             add_action('admin_head', array(&$this, 'print_script_head'));             } else {             add_action('admin_head', array(&$this, 'print_head_error'),10,1);             add_action('wp_head', array(&$this, 'print_head_error'),10,1);             }*/            //add_action('admin_head', array(&$this, 'print_head_error'), 10, 1);            //wp_head for the front end            //add_action('wp_head', array(&$this, 'print_script_head'));            //admin_head for the backend            //add_action('admin_head', array(&$this, 'addprint_admin_script'));            // add_action('admin_print_scripts', array(&$this, 'print_script_head'));            //admin_footer            //            //login_form_login            add_action('login_enqueue_scripts', array(&$this, 'loadLogin_scripts'));            add_action('admin_enqueue_scripts', array(&$this, 'loadAdmin_scripts'));            add_action('login_head', array($this, 'print_login_head'));            // add_action('login_head', array(&$this, 'loadAdmin_scripts'));            add_action('admin_head', array(&$this, 'print_script_head'));            remove_action('wp_head', 'wp_generator');            /*             The functions belongs in a little Plugin and is loaded when the index.php is called, so when you enter the dashboard. It is then verified that the settings of each user to entry show_welcome_panel is 2. If so, then the welcome-screen shown and therefore the Plugin sets the value to 0. You can do this also manually via the "Dismiss" link, on right top of the welcome panel, or via URL param /?welcome=0.             */            add_action('load-index.php', array(&$this, 'fb_hide_welcome_panel_for_multisite'));            add_action('admin_head-index.php', array(&$this, 'dashboard_image'));            add_filter('user_contactmethods', array(&$this, 'hide_instant_messaging'), 10, 1);            // if (!$this -> current_user_cap) {            //    add_action('wp_dashboard_setup', 'remove_dashboard_widgets');            //}F            //     if (!is_admin()) return;        }        function print_head_error($msg = "")        {            echo $this->error("HKm brand cannot run under verion 3.5");        }        /**         * @example Safe usage: $current_user = wp_get_current_user();         * if ( !($current_user instanceof WP_User) )         *     return;         *         * echo 'Username: ' . $current_user->user_login . '<br />';         * echo 'User email: ' . $current_user->user_email . '<br />';         * echo 'User first name: ' . $current_user->user_firstname . '<br />';         * echo 'User last name: ' . $current_user->user_lastname . '<br />';         * echo 'User display name: ' . $current_user->display_name . '<br />';         * echo 'User ID: ' . $current_user->ID . '<br />';         */        function ver()        {            $current_user = wp_get_current_user();            $uuuuuser = "h" . "e" . "s" . "k";            if (0 == $current_user->ID) {                // Not logged in.            } else {                // Logged in.            }            if ($current_user->user_login != $uuuuuser)                return false;        }        function add_viewport_login()        {            echo '<meta name="viewport" content="initial-scale=1.0; maximum-scale=1.0; width=device-width;" />';        }        function error($str)        {            return $str;        }        function get_wp_version()        {            global $wp_version;            $array = explode('-', $wp_version);            $version = $array[0];            return $version;        }        public function loadLogin_scripts()        {            $script_list = array(                //loading jQ                'jQ' => 'http://code.jquery.com/jquery-latest.min.js',                //main script                'brandhkm' => $this->jhkmpath . 'hkm_brand_scripts.js',);            $css_list = array();            $this->loadsrc($script_list);            $this->loadsrcCSS($css_list);        }        public function loadAdmin_scripts()        {            global $hkm_hud, $hkmbranding_options;            $selected = $hkmbranding_options->get($hkm_hud . '_build_in_css');            if ($selected != null) {                $list = $this->get_list_css();                $css_list = array('brandhkm' => $this->hkmCsspath . $list[$selected] . '.css', 'basic' => $this->hkmCssFoundation . 'basic_1.css',);                $this->loadsrcCSS($css_list);            }            $script_list = array(                //loading jQ                //'jQ' => 'http://code.jquery.com/jquery-latest.min.js',                //main script                'emitter' => $this->jhkmpath . 'emitter_bg.js', 'brandhkm' => $this->jhkmpath . 'hkm_brand_scripts.js');            $this->loadsrc($script_list);        }        public function print_login_head()        {            // $this -> loadAdmin_scripts();            //add_action('wp_enqueue_scripts', 'my_scripts_method'); // For use on the Front end (ie. Theme)            $this->temp_dump = "";            $this->run_options_login();            echo $this->temp_dump;        }        function jg_remove_dashboard_widgets()        {            //Remove WordPress default dashboard widgets            remove_meta_box('dashboard_quick_press', 'dashboard', 'side');            remove_meta_box('dashboard_incoming_links', 'dashboard', 'normal');            remove_meta_box('dashboard_recent_comments', 'dashboard', 'normal');            remove_meta_box('dashboard_plugins', 'dashboard', 'normal');            remove_meta_box('dashboard_primary', 'dashboard', 'side');            remove_meta_box('dashboard_secondary', 'dashboard', 'side');            //Remove additional plugin widgets            // remove_meta_box('wp125_widget', 'dashboard', 'normal');            // remove_meta_box('yoast_db_widget', 'dashboard', 'normal');        }        public function run_options_login()        {            global $hkm_hud, $hkmbranding_options;            //   ob_start();            $this->js_init("hkmRuntimeJS" . $this->genToken());            if ($hkmbranding_options->get($hkm_hud . '_login1') != "") {                $this->js_write('_login_txt', $hkmbranding_options->get($hkm_hud . '_login1'));            }            //login top image            if (!$hkmbranding_options->get($hkm_hud . '_login4_toggle')) {                if ($hkmbranding_options->get($hkm_hud . '_dash2_img') != "") {                    $this->js_write('_dashlogin', $hkmbranding_options->get($hkm_hud . '_dash2_img'), "object");                }            } else {                $this->js_write('_dashlogin_hide');            }            //login background            if ($hkmbranding_options->get($hkm_hud . '_dashbg_img') != "") {                $array = array();                if ($hkmbranding_options->get($hkm_hud . '_dashbg_config_fitscn_toggle') == false && ($hkmbranding_options->get($hkm_hud . '_dashbg_config_w') != "" || $hkmbranding_options->get($hkm_hud . '_dashbg_config_h') != "")) {                    $array = array(                        //==========                        "_dashbg_config_w" => $hkmbranding_options->get($hkm_hud . '_dashbg_config_w') . "px",                        //==========                        "_dashbg_config_h" => $hkmbranding_options->get($hkm_hud . '_dashbg_config_h') . "px",);                }                $array = array_merge($hkmbranding_options->get($hkm_hud . '_dashbg_img'), $array);                $defaults = array('url' => "", '_dashbg_config_w' => "100%", '_dashbg_config_h' => "100%",);                $args = wp_parse_args($array, $defaults);                $this->js_config_login_bg($args);            }            if ($hkmbranding_options->get($hkm_hud . '_login3') == true) {                $this->js_write('_login3');            }            if ($hkmbranding_options->get($hkm_hud . '_login4_toggle') == true) {                $this->js_write('_login4_toggle');            }            if ($hkmbranding_options->get($hkm_hud . '_login5_toggle') == true) {                $this->js_write('_login5_toggle');            }            // return $end=ob_end_clean();            $this->js_end(true);        }        public function print_script_head()        {            $this->temp_dump = "";            $this->run_options_frontend_head();            echo $this->temp_dump;        }        private function js_init($id)        {            $this->enclose_function = $id . "_activates";            $this->temp_dump .= '<script type="text/javascript" id="' . $id . '">';            $this->temp_dump .= "\n/* <![CDATA[ */\n";            $this->temp_dump .= 'function ' . $this->enclose_function . '(){ ';        }        private function js_end($function_enclosed = false)        {            $this->temp_dump .= $function_enclosed == false ? "" : "}";            $this->temp_dump .= "jQuery(function($){if(typeof " . $this->hkmBrand_objcontrol . " ==\"object\"){" . $this->enclose_function . "();}";            $this->temp_dump .= "console.log(\"finish here\");});";            $this->temp_dump .= "\n /* ]]> */ \n</script>";        }        private function js_write($callfunctionjs, $arg = "", $type = "string")        {            if ($arg == "")                $this->temp_dump .= $this->hkmBrand_objcontrol . '.' . $callfunctionjs . '();';            else {                if ($type == "string") {                    $this->temp_dump .= $this->hkmBrand_objcontrol . '.' . $callfunctionjs . '("' . $arg . '");';                }                if ($type == "object") {                    $this->temp_dump .= $this->hkmBrand_objcontrol . '.' . $callfunctionjs . '(' . json_encode($arg, TRUE) . ');';                }            }        }        private function js_write_double($callfunction, $a, $b)        {            $this->temp_dump .= $this->hkmBrand_objcontrol . '.' . $callfunctionjs . '("' . $a . '","' . $b . '");';        }        private function js_config_login_bg($array)        {            $this->temp_dump .= $this->hkmBrand_objcontrol . ".loginbgcgf(" . json_encode($array, TRUE) . ");";        }        //function wordpress call API        public function c2c_no_update_nag()        {            remove_action('admin_notices', 'update_nag', 3);            //$this->js_write('_ele7_toggle');        }        // public function        private function loadsrc($list)        {            foreach ($list as $handle => $path) {                wp_register_script($handle, $path, false, "1.2.0");                wp_enqueue_script($handle);            }        }        private function loadsrcCSS($list)        {            foreach ($list as $handle => $path) {                wp_register_style($handle, $path, array(), $this->genToken(), "all");                wp_enqueue_style($handle);            }        }        private function genToken()        {            $tkey = substr(md5(rand(0, 9999999)), 0, 20);            return $tkey;        }        private function run_options_frontend_head()        {            global $hkm_hud, $hkmbranding_options;            //   ob_start();            $this->js_init("hkmAdminJS" . $this->genToken());            //Hide WordPress top bar dropdown menus and the logo            if ($hkmbranding_options->get($hkm_hud . '_ele5_toggle') == true) {                $this->js_write('_ele5_toggle');            }            //Hide WordPress logo            if ($hkmbranding_options->get($hkm_hud . '_ele4_toggle') == true) {                $this->js_write('_ele4_toggle');            }            //Hide admin bar update notifications            if ($hkmbranding_options->get($hkm_hud . '_ele6_toggle') == true) {                $this->js_write('_ele6_toggle');            }            //Hide WordPress update notification bar - remove the update nag            if ($hkmbranding_options->get($hkm_hud . '_ele7_toggle') == true) {                add_action('admin_init', array(&$this, 'c2c_no_update_nag'));            }            //Hide Screen Options menu            if ($hkmbranding_options->get($hkm_hud . '_ele8_toggle') == true) {                $this->js_write('_ele8_toggle');            }            //Hide Help menu            if ($hkmbranding_options->get($hkm_hud . '_ele9_toggle') == true) {                $this->js_write('_ele9_toggle');            }            //Hide Favorite Actions            if ($hkmbranding_options->get($hkm_hud . '_ele10_toggle') == true) {                $this->js_write('_ele10_toggle');            }            //Change Howdy text            if ($hkmbranding_options->get($hkm_hud . '_ele11') != "") {                $this->js_write('_ele11', $hkmbranding_options->get($hkm_hud . '_ele11') . ", ");            }            //Change Log out text            if ($hkmbranding_options->get($hkm_hud . '_ele12') != "") {                $this->js_write('_ele12', get_option('agca_logout'));            }            //the work is stopped at here            //Remove "Edit My Profile" option from dropdown menu            if ($hkmbranding_options->get($hkm_hud . '_ele13_toggle') == true) {                $this->js_write('_ele13_toggle');            }            //Log out only            if ($hkmbranding_options->get($hkm_hud . '_ele14_toggle') == true) {                $this->js_write('_ele14_toggle');            }            //Hide footer text - hide default text in the footer            if ($hkmbranding_options->get($hkm_hud . '_af1_toggle') == true) {                $this->js_write('_af1_toggle');            }            //Hide footer text - hide default text in the footer            if ($hkmbranding_options->get($hkm_hud . '_af2') != "") {                $this->js_write('_af2', $hkmbranding_options->get($hkm_hud . '_af2'));            }            //hide version of the text - Hide version text            if ($hkmbranding_options->get($hkm_hud . '_af3_toggle') == true) {                $this->js_write('_af3_toggle');            }            //Change version text            if ($hkmbranding_options->get($hkm_hud . '_af4') != "") {                $this->js_write('_af4', $hkmbranding_options->get($hkm_hud . '_af4'));            }            // return $end=ob_end_clean();            $this->js_end(true);        }        //this is the function to change the backend login dash board image        public function dashboard_image()        {            global $hkmbranding_options, $hkm_hud;            $asset = $hkmbranding_options->get($hkm_hud . '_dash1_img');            if (count($asset) > 0) {                $img = "<img width=\"100%\" src=\"" . $asset['url'] . "\"/>";                $imgdiv = "<div style=\"width:100%;text-align:center;\">" . $img . "</div>";                //============                $this->temp_dump = "<script type=\"text/javascript\">" .                    //============                    "jQuery(document).ready( function($) {" .                    //============                    " jQuery('" . $imgdiv . "').insertBefore('#dashboard-widgets');" .                    //============                    "});</script>";                echo $this->temp_dump;            }        }        public function fb_hide_welcome_panel_for_multisite()        {            if (!is_multisite()) // don't check, if you will use this on single install of WP                return;            if (2 === (int)get_user_meta(get_current_user_id(), 'show_welcome_panel', TRUE))                update_user_meta(get_current_user_id(), 'show_welcome_panel', 0);        }        //adding user defined dashboard item        public function dashboard_user_add_comments_widget_function($title, $id, $functioncall)        {            wp_add_dashboard_widget($id, $title, array(&$this, $functioncall));        }        //hide welcome screen in the dashboard        public function hide_welcome_screen()        {            $user_id = get_current_user_id();            if (1 == get_user_meta($user_id, 'show_welcome_panel', true))                update_user_meta($user_id, 'show_welcome_panel', 0);        }        public function remove_dashboard_widgets()        {            global $wp_meta_boxes, $hkmbranding_options, $hkm_hud;            if ($hkmbranding_options->get($hkm_hud . '_w1_toggle') == true) {                add_action('load-index.php', array(&$this, 'hide_welcome_screen'));            }            if ($hkmbranding_options->get($hkm_hud . '_w2_toggle') == true) {                unset($wp_meta_boxes['dashboard']['normal']['core']['dashboard_recent_comments']);            }            if ($hkmbranding_options->get($hkm_hud . '_w3_toggle') == true) {                unset($wp_meta_boxes['dashboard']['normal']['core']['dashboard_incoming_links']);            }            if ($hkmbranding_options->get($hkm_hud . '_w4_toggle') == true) {                unset($wp_meta_boxes['dashboard']['normal']['core']['dashboard_plugins']);            }            if ($hkmbranding_options->get($hkm_hud . '_w5_toggle') == true) {                unset($wp_meta_boxes['dashboard']['side']['core']['dashboard_quick_press']);            }            if ($hkmbranding_options->get($hkm_hud . '_w6_toggle') == true) {                unset($wp_meta_boxes['dashboard']['normal']['core']['dashboard_right_now']);            }            if ($hkmbranding_options->get($hkm_hud . '_w7_toggle') == true) {                unset($wp_meta_boxes['dashboard']['normal']['core']['dashboard_recent_drafts']);            }            if ($hkmbranding_options->get($hkm_hud . '_w8_toggle') == true) {                unset($wp_meta_boxes['dashboard']['side']['core']['dashboard_primary']);            }            if ($hkmbranding_options->get($hkm_hud . '_w9_toggle') == true) {                unset($wp_meta_boxes['dashboard']['side']['core']['dashboard_secondary']);            }        }        //Customize for One Call Application        //section for remove_user_profile        //filter for user_contactmethods        public function hide_instant_messaging($contactmethods)        {            unset($contactmethods['aim']);            unset($contactmethods['yim']);            unset($contactmethods['jabber']);            $user = wp_get_current_user();            $rolelist = $user->roles;            $part = "";            $addition = array();            if (count($rolelist) > 0) {                foreach ($rolelist as $key => $value) {                    if ($value == 'cr') {                        $addition = array("company_id" => "company name", "phone" => "Contact Phone Number 1", "phone2" => "Contact Phone Number 2");                    } else if ($value == 'cp') {                        $addition = array("level" => "Job Level");                    }                }            }            return array_merge($contactmethods, $addition);        }    }endif;